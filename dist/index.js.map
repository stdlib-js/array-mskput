{
  "version": 3,
  "sources": ["../lib/defaults.js", "../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'mode': 'repeat'\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar MODES = [\n\t'strict',\n\t'non_strict',\n\t'strict_broadcast',\n\t'broadcast',\n\t'repeat'\n];\nvar isMode = contains( MODES );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - mode option\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'strict'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'mode', MODES.join( '\", \"' ), opts.mode ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isMostlySafeCast = require( '@stdlib/array-base-assert-is-mostly-safe-data-type-cast' );\nvar isRealDataType = require( '@stdlib/array-base-assert-is-real-data-type' );\nvar isComplexDataType = require( '@stdlib/array-base-assert-is-complex-floating-point-data-type' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar base = require( '@stdlib/array-base-mskput' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar convert = require( '@stdlib/array-convert' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Replaces elements of an array with provided values according to a provided mask array.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} values - values to set\n* @param {Options} [options] - function options\n* @param {string} [options.mode='repeat'] - string specifying behavior when the number of values does not equal the number of falsy mask values\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} second argument must be a collection\n* @throws {TypeError} third argument must be a collection\n* @throws {TypeError} options argument must be an object\n* @throws {Error} must provide valid options\n* @throws {Error} insufficient values to satisfy mask array\n* @throws {Error} number of values does not equal the number of falsy mask values\n* @throws {TypeError} third argument cannot be safely cast to the data type of the first argument\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 1, 0, 0, 1 ];\n* var values = [ 20, 30 ];\n*\n* var out = mskput( x, mask, values );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 1, 0, 0, 1 ];\n* var values = [ 30 ];\n*\n* var out = mskput( x, mask, values );\n* // returns [ 1, 30, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 0, 0, 1, 0 ];\n* var values = [ 20, 30 ];\n*\n* var out = mskput( x, mask, values );\n* // returns [ 20, 30, 3, 20 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\nfunction mskput( x, mask, values ) {\n\tvar opts;\n\tvar err;\n\tvar xdt;\n\tvar vdt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', x ) );\n\t}\n\tif ( !isCollection( mask ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', mask ) );\n\t}\n\tif ( !isCollection( values ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object. Value: `%s`.', values ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, arguments[ 3 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\txdt = dtype( x ) || 'generic';\n\tvdt = dtype( values ) || 'generic';\n\n\t// Safe casts are always allowed and allow same kind casts (i.e., downcasts) only when the input array data type is floating-point...\n\tif ( !isMostlySafeCast( vdt, xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument cannot be safely cast to the input array data type. Data types: [%s, %s].', vdt, xdt ) );\n\t}\n\t// When performing a real-to-complex assignment, interpret the real-valued array as containing real components with implied imaginary components equal to zero and explicitly convert to a complex-valued array...\n\tif ( isComplexDataType( xdt ) && isRealDataType( vdt ) ) {\n\t\tvalues = convert( values, xdt );\n\t}\n\t// Replace values in the input array:\n\treturn base( x, mask, values, opts.mode );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mskput;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Replace elements of an array with provided values according to a provided mask array.\n*\n* @module @stdlib/array-mskput\n*\n* @example\n* var mskput = require( '@stdlib/array-mskput' );\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var mask = [ 1, 0, 0, 1 ];\n* var values = [ 20, 30 ];\n*\n* var out = mskput( x, mask, values );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAgCA,SAASC,GAAW,CACnB,MAAO,CACN,KAAQ,QACT,CACD,CAKAD,EAAO,QAAUC,ICzCjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,gCAAiC,EACrDC,EAAa,QAAS,iCAAkC,EACxDC,EAAW,QAAS,oCAAqC,EAAE,QAC3DC,EAAS,QAAS,uBAAwB,EAK1CC,EAAQ,CACX,SACA,aACA,mBACA,YACA,QACD,EACIC,EAASH,EAAUE,CAAM,EAwB7B,SAASE,EAAUC,EAAMC,EAAU,CAClC,OAAMR,EAAUQ,CAAQ,EAGnBP,EAAYO,EAAS,MAAO,IAChCD,EAAK,KAAOC,EAAQ,KACf,CAACH,EAAQE,EAAK,IAAK,GAChB,IAAI,UAAWJ,EAAQ,gFAAiF,OAAQC,EAAM,KAAM,MAAO,EAAGG,EAAK,IAAK,CAAE,EAGpJ,KARC,IAAI,UAAWJ,EAAQ,qEAAsEK,CAAQ,CAAE,CAShH,CAKAT,EAAO,QAAUO,IC7EjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,yDAA0D,EACtFC,EAAiB,QAAS,6CAA8C,EACxEC,EAAoB,QAAS,+DAAgE,EAC7FC,EAAe,QAAS,8BAA+B,EACvDC,EAAO,QAAS,2BAA4B,EAC5CC,EAAQ,QAAS,qBAAsB,EACvCC,EAAU,QAAS,uBAAwB,EAC3CC,EAAS,QAAS,uBAAwB,EAC1CC,EAAW,IACXC,EAAW,IA2Df,SAASC,EAAQC,EAAGC,EAAMC,EAAS,CAClC,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAK,CAACd,EAAcQ,CAAE,EACrB,MAAM,IAAI,UAAWJ,EAAQ,8EAA+EI,CAAE,CAAE,EAEjH,GAAK,CAACR,EAAcS,CAAK,EACxB,MAAM,IAAI,UAAWL,EAAQ,+EAAgFK,CAAK,CAAE,EAErH,GAAK,CAACT,EAAcU,CAAO,EAC1B,MAAM,IAAI,UAAWN,EAAQ,8EAA+EM,CAAO,CAAE,EAGtH,GADAC,EAAON,EAAS,EACX,UAAU,OAAS,IACvBO,EAAMN,EAAUK,EAAM,UAAW,CAAE,CAAE,EAChCC,GACJ,MAAMA,EAOR,GAJAC,EAAMX,EAAOM,CAAE,GAAK,UACpBM,EAAMZ,EAAOQ,CAAO,GAAK,UAGpB,CAACb,EAAkBiB,EAAKD,CAAI,EAChC,MAAM,IAAI,UAAWT,EAAQ,6GAA8GU,EAAKD,CAAI,CAAE,EAGvJ,OAAKd,EAAmBc,CAAI,GAAKf,EAAgBgB,CAAI,IACpDJ,EAASP,EAASO,EAAQG,CAAI,GAGxBZ,EAAMO,EAAGC,EAAMC,EAAQC,EAAK,IAAK,CACzC,CAKAf,EAAO,QAAUW,ICvFjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "contains", "format", "MODES", "isMode", "validate", "opts", "options", "require_main", "__commonJSMin", "exports", "module", "isMostlySafeCast", "isRealDataType", "isComplexDataType", "isCollection", "base", "dtype", "convert", "format", "defaults", "validate", "mskput", "x", "mask", "values", "opts", "err", "xdt", "vdt", "main"]
}
